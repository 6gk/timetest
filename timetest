#!/usr/bin/env bash
# timetest rev.7
#  https://github.com/6gk/timetest
#  MIT license (Expat), 6gk/gk/gtk
# shellcheck disable=2182,2059,2034,1007  ## shellcheck wrong because i am too good

avg=0 high= low=  i=0  n=/dev/null  dur=$EPOCHREALTIME
# set default for changable vars
[[ $limit ]] && [[ ! $times ]] && times=0
times=${times:-25}
delay=${delay:-0.1}
[[ "$times" = 0 ]] && times=
[[ ! "$times$limit" ]] && times=25


while [[ ! "$times" ]] || [[ "$i" -lt "$times" ]]; do
	printf "\r$((i++))${times:+/$times} (${SECONDS}${limit:+/$limit}s)  " >/dev/stderr
	# todo: make good
	[[ "$limit" -gt 0 ]] && [[ "$SECONDS" -ge "$limit" ]] && times=$((i-1)) && break

	var=$EPOCHREALTIME  # bash v5ism

	# more or less a floor of 0.005ms with builtins,
	# and 0.21ms with external commands on my system (5600x, mx500)
	"$@" &>$n

	# math command execute time
	# and remove the . as bash doesn't work with decimals.
	((var=${EPOCHREALTIME/.}-${var/.}))
	# remove last character
	var=${var%?}

	# save for averaging/getting median later
	avg=$var+$avg
	# if applicable, update high/low times.
	[[ "$var" -gt "$high" ]] && high=$var
	[[ "$var" -lt "${low:=$var}" ]] && low=$var
	# wait so the times are more consistent[1] (& therefore more accurate)
	[[ "$delay" != 0 ]] && sleep "$delay"
done


# math: median, interquartile range, average, minmax delta
dur=$SECONDS
nums=$(printf "${avg//+/\\n}" | sort -n)
med=$(sed "$((times/2))!d"  <<< "$nums")
q1=$(sed "$((times*1/4))!d" <<< "$nums")
q3=$(sed "$((times*3/4))!d" <<< "$nums")
((iqr=q3-q1, avg=(avg)/times, dt=high-low))
# colours
b=$'\033[34m'  c=$'\033[36m'  r=$'\033[0m'

# print the results
num() { printf -vn %03d "${!1}"; printf "${n%??}.${n: -2}"; }

printf "\r"
printf "~$b$(num med)$r  "
printf "±$(num iqr) "
#printf "⤒ $(num high)  "
#printf "⤓ $(num low)  "
printf "$c|$r $1 "
printf "$c|$r ms, $b$times${r}x, $b$delay${r}s between, $b$dur${r}s total\n"
